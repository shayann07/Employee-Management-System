// Generated by view binder compiler. Do not edit!
package com.example.tesla.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tesla.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecyclerItemsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageButton deleteEmployee;

  @NonNull
  public final TextView fetchedEmployeeDesignation;

  @NonNull
  public final TextView fetchedEmployeeName;

  @NonNull
  public final View recyclerViewDivider;

  private RecyclerItemsBinding(@NonNull LinearLayout rootView, @NonNull ImageButton deleteEmployee,
      @NonNull TextView fetchedEmployeeDesignation, @NonNull TextView fetchedEmployeeName,
      @NonNull View recyclerViewDivider) {
    this.rootView = rootView;
    this.deleteEmployee = deleteEmployee;
    this.fetchedEmployeeDesignation = fetchedEmployeeDesignation;
    this.fetchedEmployeeName = fetchedEmployeeName;
    this.recyclerViewDivider = recyclerViewDivider;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RecyclerItemsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecyclerItemsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recycler_items, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecyclerItemsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.delete_employee;
      ImageButton deleteEmployee = ViewBindings.findChildViewById(rootView, id);
      if (deleteEmployee == null) {
        break missingId;
      }

      id = R.id.fetched_employee_designation;
      TextView fetchedEmployeeDesignation = ViewBindings.findChildViewById(rootView, id);
      if (fetchedEmployeeDesignation == null) {
        break missingId;
      }

      id = R.id.fetched_employee_name;
      TextView fetchedEmployeeName = ViewBindings.findChildViewById(rootView, id);
      if (fetchedEmployeeName == null) {
        break missingId;
      }

      id = R.id.recycler_view_divider;
      View recyclerViewDivider = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewDivider == null) {
        break missingId;
      }

      return new RecyclerItemsBinding((LinearLayout) rootView, deleteEmployee,
          fetchedEmployeeDesignation, fetchedEmployeeName, recyclerViewDivider);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
